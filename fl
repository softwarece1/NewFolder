package filelistener;

import java.nio.file.*;
import static java.nio.file.StandardWatchEventKinds.*;
import static java.nio.file.LinkOption.*;
import java.nio.file.attribute.*;
import java.io.*;
import java.util.*;
import java.util.concurrent.*;

public class FileListener extends Thread {

    static volatile boolean runThread=true;
    private final WatchService watcher;
    private final Map<WatchKey,Path> keys;
    private final boolean recursive;
    private boolean trace = false;

    @SuppressWarnings("unchecked")
    static <T> WatchEvent<T> cast(WatchEvent<?> event) {
        return (WatchEvent<T>)event;
    }

    /**
     * Register the given directory with the WatchService
     */
    private void register(Path dir) throws IOException {
        WatchKey key = dir.register(watcher, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY);
        if (trace) {
            Path prev = keys.get(key);
            if (prev == null) {
                System.out.format("register: %s\n", dir);
            } else {
                if (!dir.equals(prev)) {
                    System.out.format("update: %s -> %s\n", prev, dir);
                }
            }
        }
        keys.put(key, dir);
    }

    /**
     * Register the given directory, and all its sub-directories, with the
     * WatchService.
     */
    private void registerAll(final Path start) throws IOException {
        // register directory and sub-directories
        Files.walkFileTree(start, new SimpleFileVisitor<Path>() {
            @Override
            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs)
                throws IOException
            {
                register(dir);
                return FileVisitResult.CONTINUE;
            }
        });
    }

    /**
     * Creates a WatchService and registers the given directory
     */
    

    
    FileListener(Path dir, boolean recursive) throws IOException {
        this.watcher = FileSystems.getDefault().newWatchService();
        this.keys = new HashMap<WatchKey,Path>();
        this.recursive = recursive;

        if (recursive) {
            System.out.format("Scanning %s ...\n", dir);
            
            registerAll(dir);
            System.out.println("Done.");
        } else {
            register(dir);
        }

        // enable trace after initial registration
        this.trace = true;
    }




    public static void main(String[] args) throws Exception {
        
        boolean recursive=true;
        
        Properties p = new Properties();
	p.load(new FileInputStream("C:/Users/BEL/Documents/NetBeansProjects/fileListener/src/filelistener/target.properties"));

        
        Path dir = Paths.get(p.getProperty("target"));
        System.out.println(dir);
        FileListener f1 = new FileListener(dir, recursive);
        f1.start(); //thread started
            
        while(true)
        {   Properties p1 = new Properties();
            p1.load(new FileInputStream("C:/Users/BEL/Documents/NetBeansProjects/fileListener/src/filelistener/target.properties"));
            Path newDir=Paths.get(p1.getProperty("target"));
           // System.out.println(newDir);
            
            if(!(dir.toString()).equals(newDir.toString()))
            {
                
                f1.interrupt();
                //stop old thread
                runThread = false;
                //manage directories
                dir = newDir;
                //start new Thread
                runThread=true;
                f1 = new FileListener(newDir, recursive);
                f1.start();
            }
            
        }
    }

     /**
     * Process all events for keys queued to the watcher
     */
    @Override
    public void run() {
        int j=0;
		
        while(runThread==true)
	{

            // wait for key to be signalled
            WatchKey key;
            try
            {
                key = watcher.poll(1L,TimeUnit.SECONDS);
                if(key==null)
                {
                        System.out.println("------------------------------------------------");
                        key=watcher.take();
                        j++;
                }

            } catch (InterruptedException x) {
                Thread.currentThread().interrupt();
                 // leave the loop or maybe return from run()
                break;
            }

            Path dir = keys.get(key);
            System.out.println(dir);
            if (dir == null) {
                System.err.println("WatchKey not recognized!!");
                continue;
            }

            for (WatchEvent<?> event: key.pollEvents()) 
			{
                WatchEvent.Kind kind = event.kind();

                // TBD - provide example of how OVERFLOW event is handled
                if (kind == OVERFLOW) {
                    continue;
                }

                // Context for directory entry event is the file name of entry
                WatchEvent<Path> ev = cast(event);
                Path name = ev.context();
                Path child = dir.resolve(name);

                // print out event
                System.out.format(j+". %s: %s\n", event.kind().name(), child);

                // if directory is created, and watching recursively, then  register it and its sub-directories
                if (recursive && (kind == ENTRY_CREATE)) {
                    try {
                        if (Files.isDirectory(child, NOFOLLOW_LINKS)) {
                            registerAll(child);
                        }
                    } catch (IOException x) {
                        x.printStackTrace();
                    }
                }
            }
			System.out.println();

            // reset key and remove from set if directory no longer accessible
            boolean valid = key.reset();
            if (!valid)
			{
                keys.remove(key);
                // all directories are inaccessible
                if (keys.isEmpty()) 
				{
                    break;
                }
            }
        }
    }
}
